library(shiny)
library(plotly)
library(dplyr)
ui <- fluidPage(
titlePanel("Airbnb Listings in New York City, USA (2011-2019)"),
sidebarLayout(
sidebarPanel(
selectInput("room_type", "Choose a Room Type:",
choices = unique(airbnb$room_type)),
sliderInput("price", "Filter by Price:",
min = 0, max = max(airbnb$price), value = c(0, max(airbnb$price))),
sliderInput("nights", "Filter by Minimum Nights:",
min = 1, max = max(airbnb$minimum_nights), value = c(1, max(airbnb$minimum_nights)))
),
mainPanel(
plotlyOutput("boxplot")
)
server <- function(input, output) {
filtered_airbnb <- reactive({
airbnb %>%
filter(room_type == input$room_type &
price >= input$price[1] & price <= input$price[2] &
minimum_nights >= input$nights[1] & minimum_nights <= input$nights[2])
})
output$boxplot <- renderPlotly({
p <- ggplot(filtered_airbnb(), aes(x = room_type, y = price, fill = room_type)) +
geom_boxplot(alpha = 0.5) +
ggtitle(paste0("Boxplot of ", input$room_type, " Room Type and Price")) +
xlab("Room Type") + ylab("Price") +
theme_minimal()
ggplotly(p, tooltip = c("y", "lower", "middle", "upper", "outlier"),
width = 800, height = 500) %>%
layout(showlegend = FALSE)
})
}
shinyApp(ui, server)
library(shiny)
library(ggplot2)
library(plotly)
library(dplyr)
ui <- fluidPage(
titlePanel("Airbnb Listings in New York City, USA (2011-2019)"),
sidebarLayout(
sidebarPanel(
selectInput("plot_type", "Choose a Plot Type:",
choices = c("Scatterplot", "Boxplot"), selected = "All"),
conditionalPanel(condition = "input.plot_type == 'Scatterplot'",
sliderInput("n", "Number of observations to view:",
min = 1, max = nrow(airbnb), value = 50)),
conditionalPanel(condition = "input.plot_type == 'Boxplot'",
selectInput("room_type", "Choose a Room Type:",
choices = c("All", unique(airbnb$room_type))),
sliderInput("price", "Filter by Price:",
min = 0, max = max(airbnb$price), value = c(0, max(airbnb$price))),
sliderInput("nights", "Filter by Minimum Nights:",
min = 1, max = max(airbnb$minimum_nights), value = c(1, max(airbnb$minimum_nights)))
)
),
mainPanel(
plotlyOutput("plot")
)
server <- function(input, output) {
filtered_airbnb <- reactive({
airbnb %>%
filter(if(input$room_type == "All") TRUE else room_type == input$room_type,
price >= input$price[1] & price <= input$price[2],
minimum_nights >= input$nights[1] & minimum_nights <= input$nights[2])
})
output$plot <- renderPlotly({
if (input$plot_type == "Scatterplot") {
gg <- ggplot(filtered_airbnb()[1:input$n,], aes(x = minimum_nights, y = price, color = neighbourhood_group, label = name)) +
geom_point(alpha = 0.5) +
ggtitle("Scatterplot of Price and Minimum Nights") +
labs(x = "Minimum Nights", y = "Price") +
theme_bw()
ggplotly(gg, tooltip = c("name"))
} else if (input$plot_type == "Boxplot") {
p <- ggplot(filtered_airbnb(), aes(x = room_type, y = price, fill = room_type)) +
geom_boxplot(alpha = 0.5) +
ggtitle(paste0("Boxplot of ", ifelse(input$room_type == "All", "All", input$room_type), " Room Type and Price")) +
xlab("Room Type") + ylab("Price") +
theme_minimal()
ggplotly(p, tooltip = c("y", "lower", "middle", "upper", "outlier"),
width = 800, height = 500) %>%
layout(showlegend = FALSE)
}
})
}
shinyApp(ui, server)
library(shiny)
library(plotly)
library(dplyr)
ui <- fluidPage(
titlePanel("Airbnb Listings in New York City, USA (2011-2019)"),
sidebarLayout(
sidebarPanel(
selectInput("room_type", "Choose a Room Type:",
choices = c("All", unique(airbnb$room_type))),
sliderInput("price", "Filter by Price:",
min = 0, max = max(airbnb$price), value = c(0, max(airbnb$price))),
sliderInput("nights", "Filter by Minimum Nights:",
min = 1, max = max(airbnb$minimum_nights), value = c(1, max(airbnb$minimum_nights)))
),
mainPanel(
plotlyOutput("boxplot")
)
server <- function(input, output) {
filtered_airbnb <- reactive({
airbnb %>%
filter(room_type == input$room_type &
price >= input$price[1] & price <= input$price[2] &
minimum_nights >= input$nights[1] & minimum_nights <= input$nights[2])
})
output$boxplot <- renderPlotly({
p <- ggplot(filtered_airbnb(), aes(x = room_type, y = price, fill = room_type)) +
geom_boxplot(alpha = 0.5) +
ggtitle(paste0("Boxplot of ", input$room_type, " Room Type and Price")) +
xlab("Room Type") + ylab("Price") +
theme_minimal()
ggplotly(p, tooltip = c("y", "lower", "middle", "upper", "outlier"),
width = 800, height = 500) %>%
layout(showlegend = FALSE)
})
}
shinyApp(ui, server)
library(shiny)
library(plotly)
library(dplyr)
ui <- fluidPage(
titlePanel("Airbnb Listings in New York City, USA (2011-2019)"),
sidebarLayout(
sidebarPanel(
selectInput("room_type", "Choose a Room Type:",
choices = c("All", unique(airbnb$room_type))), # added "All" option as default
sliderInput("price", "Filter by Price:",
min = 0, max = max(airbnb$price), value = c(0, max(airbnb$price))),
sliderInput("nights", "Filter by Minimum Nights:",
min = 1, max = max(airbnb$minimum_nights), value = c(1, max(airbnb$minimum_nights)))
),
mainPanel(
plotlyOutput("boxplot")
)
server <- function(input, output) {
filtered_airbnb <- reactive({
if(input$room_type == "All") {
airbnb %>%
filter(price >= input$price[1] & price <= input$price[2] &
minimum_nights >= input$nights[1] & minimum_nights <= input$nights[2])
} else {
airbnb %>%
filter(room_type == input$room_type &
price >= input$price[1] & price <= input$price[2] &
minimum_nights >= input$nights[1] & minimum_nights <= input$nights[2])
}
})
output$boxplot <- renderPlotly({
p <- ggplot(filtered_airbnb(), aes(x = room_type, y = price, fill = room_type)) +
geom_boxplot(alpha = 0.5) +
ggtitle(paste0("Boxplot of ", input$room_type, " Room Type and Price")) +
xlab("Room Type") + ylab("Price") +
theme_minimal()
ggplotly(p, tooltip = c("y", "lower", "middle", "upper", "outlier"),
width = 800, height = 500) %>%
layout(showlegend = FALSE)
})
}
shinyApp(ui, server)
library(shiny)
library(plotly)
library(dplyr)
ui <- fluidPage(
titlePanel("Airbnb Listings in New York City, USA (2011-2019)"),
sidebarLayout(
sidebarPanel(
selectInput("room_type", "Choose a Room Type:",
choices = c("All", unique(airbnb$room_type))), # added "All" option as default
sliderInput("price", "Filter by Price:",
min = 0, max = max(airbnb$price), value = c(0, max(airbnb$price))),
sliderInput("nights", "Filter by Minimum Nights:",
min = 1, max = max(airbnb$minimum_nights), value = c(1, max(airbnb$minimum_nights)))
),
mainPanel(
plotlyOutput("boxplot")
)
server <- function(input, output) {
filtered_airbnb <- reactive({
if(input$room_type == "All") {
airbnb %>%
filter(price >= input$price[1] & price <= input$price[2] &
minimum_nights >= input$nights[1] & minimum_nights <= input$nights[2])
} else {
airbnb %>%
filter(room_type == input$room_type &
price >= input$price[1] & price <= input$price[2] &
minimum_nights >= input$nights[1] & minimum_nights <= input$nights[2])
}
})
output$boxplot <- renderPlotly({
p <- ggplot(filtered_airbnb(), aes(x = room_type, y = price, fill = room_type)) +
geom_boxplot(alpha = 0.5) +
ggtitle(paste0("Boxplot of ", input$room_type, " Room Type and Price")) +
xlab("Room Type") + ylab("Price") +
theme_minimal()
ggplotly(p, tooltip = c("y", "lower", "middle", "upper", "outlier"),
width = 800, height = 500) %>%
layout(showlegend = FALSE)
})
}
shinyApp(ui, server)
library(shiny)
library(plotly)
library(dplyr)
ui <- fluidPage(
titlePanel("Airbnb Listings in New York City, USA (2011-2019)"),
sidebarLayout(
sidebarPanel(
selectInput("room_type", "Choose a Room Type:",
choices = c("All", unique(airbnb$room_type))), # added "All" option as default
sliderInput("price", "Filter by Price:",
min = 0, max = max(airbnb$price), value = c(0, max(airbnb$price))),
sliderInput("nights", "Filter by Minimum Nights:",
min = 1, max = 30, value = c(1, max))
),
mainPanel(
plotlyOutput("boxplot")
)
library(shiny)
library(plotly)
library(dplyr)
ui <- fluidPage(
titlePanel("Airbnb Listings in New York City, USA (2011-2019)"),
sidebarLayout(
sidebarPanel(
selectInput("room_type", "Choose a Room Type:",
choices = c("All", unique(airbnb$room_type))), # added "All" option as default
sliderInput("price", "Filter by Price:",
min = 0, max = max(airbnb$price), value = c(0, max(airbnb$price))),
sliderInput("nights", "Filter by Minimum Nights:",
min = 1, max = 30, value = c(1, max(airbnb$minimum_nights)))
),
mainPanel(
plotlyOutput("boxplot")
)
server <- function(input, output) {
filtered_airbnb <- reactive({
if(input$room_type == "All") {
airbnb %>%
filter(price >= input$price[1] & price <= input$price[2] &
minimum_nights >= input$nights[1] & minimum_nights <= input$nights[2])
} else {
airbnb %>%
filter(room_type == input$room_type &
price >= input$price[1] & price <= input$price[2] &
minimum_nights >= input$nights[1] & minimum_nights <= input$nights[2])
}
})
output$boxplot <- renderPlotly({
p <- ggplot(filtered_airbnb(), aes(x = room_type, y = price, fill = room_type)) +
geom_boxplot(alpha = 0.5) +
ggtitle(paste0("Boxplot of ", input$room_type, " Room Type and Price")) +
xlab("Room Type") + ylab("Price") +
theme_minimal()
ggplotly(p, tooltip = c("y", "lower", "middle", "upper", "outlier"),
width = 800, height = 500) %>%
layout(showlegend = FALSE)
})
}
shinyApp(ui, server)
library(shiny)
library(ggplot2)
library(plotly)
library(dplyr)
library(magrittr)
ui <- fluidPage(
titlePanel("Airbnb Listings in New York City, USA (2011-2019)"),
sidebarLayout(
sidebarPanel(
sliderInput("n", "Number of observations to view:",
min = 1, max = nrow(airbnb), value = 50),
checkboxGroupInput("room_type", "Select Room Types to Display:",
choices = unique(airbnb$room_type),
selected = unique(airbnb$room_type)),
selectInput("neighbourhood_group", "Select a Neighbourhood Group:",
choices = c("All", unique(airbnb$neighbourhood_group)))
),
mainPanel(
plotlyOutput("plot")
)
server <- function(input, output) {
filtered_airbnb <- reactive({
if(input$neighbourhood_group == "All"){
airbnb %>%
filter(room_type %in% input$room_type) %>%
slice(1:input$n)
} else {
airbnb %>%
filter(neighbourhood_group == input$neighbourhood_group &
room_type %in% input$room_type) %>%
slice(1:input$n)
}
})
output$plot <- renderPlotly({
filtered_airbnb() %>%
ggplot(aes(x = neighbourhood, fill = room_type)) +
geom_bar() +
labs(title = "Stacked Bar chart of Neighbourhood and Room Type") +
theme(plot.title = element_text(size = 20)) +
scale_fill_brewer(palette = "Set1") +
theme(legend.title = element_blank(),
legend.position = "bottom",
axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) -> p
ggplotly(airbnb = p %+% airbnb.frame(neighbourhood = filtered_airbnb()$neighbourhood),
tooltip = c("room_type", "count")) %>%
layout(hovermode = "closest",
hoverlabel = list(bgcolor = "white",
font = list(family = "Roboto", size = 14),
align = "left"),
xaxis = list(title = "Neighbourhood", tickfont = list(size = 12)),
yaxis = list(title = "Count", tickfont = list(size = 12)))
})
}
shinyApp(ui, server)
library(shiny)
library(plotly)
# Define colors for each room_type
colors <- c("#7fc97f", "#beaed4", "#fdc086", "#ffff99")
ui <- fluidPage(
titlePanel("Price Distribution of Airbnb Listings in New York City"),
sidebarLayout(
sidebarPanel(
sliderInput("price_range", "Price Range:",
min = 0, max = 1000, value = c(0, 500)),
br(),
checkboxGroupInput("room_type", "Select Room Types to Display:",
choices = unique(airbnb$room_type),
selected = unique(airbnb$room_type)),
br(),
selectInput("neighbourhood_group", "Select a Neighbourhood Group:",
choices = c("All", sort(unique(airbnb$neighbourhood_group)))),
br(),
selectInput("minimum_nights", "Minimum Nights:",
choices = c("All", 1:30),
selected = "All"),
br(),
selectInput("availability_365", "Availability 365:",
choices = c("All", sort(unique(airbnb$availability_365))))
),
mainPanel(
plotlyOutput("plot")
)
server <- function(input, output) {
filtered_airbnb <- reactive({
# Map each room_type to a color
colors_map <- setNames(colors, unique(airbnb$room_type))
airbnb %>%
filter(price >= input$price_range[1] & price <= input$price_range[2],
room_type %in% input$room_type,
if(input$neighbourhood_group == "All") TRUE else neighbourhood_group == input$neighbourhood_group,
if(input$minimum_nights == "All") TRUE else minimum_nights == as.numeric(input$minimum_nights),
if(input$availability_365 == "All") TRUE else availability_365 == as.numeric(input$availability_365)
) %>%
# Add a new column "color" based on room_type
mutate(color = colors_map[room_type])
})
output$plot <- renderPlotly({
filtered_airbnb() %>%
plot_ly(x = ~price, type = "histogram",
marker = list(color = ~color,
line = list(color = "white", width = 0.5)),
hovertemplate = paste(
"<b>Price:</b> %{x:.0f}<br>",
"<b>Count:</b> %{y:.0f}<br>",
"<b>Room Type:</b> %{marker.color}"
),
showlegend = FALSE
) %>%
layout(xaxis = list(title = "Price"),
yaxis = list(title = "Count"),
hovermode = "closest",
hoverlabel = list(bgcolor = "white",
font = list(family = "Roboto", size = 14),
align = "left"),
colorway = colors,
margin = list(l = 40, r = 40, t = 40, b = 40))
})
}
shinyApp(ui, server)
library(leaflet)
ui <- fluidPage(
titlePanel("Airbnb Listings in New York City"),
sidebarLayout(
sidebarPanel(
sliderInput("price_slider", "Filter by Price", min = 0, max = 1000, value = c(0, 500)),
sliderInput("min_nights_slider", "Filter by Minimum Nights", min = 1, max = 30, value = c(1, 7))
),
mainPanel(
leafletOutput("map")
)
server <- function(input, output) {
filtered_airbnb <- reactive({
airbnb %>%
filter(price >= input$price_slider[1] & price <= input$price_slider[2] & minimum_nights >= input$min_nights_slider[1] & minimum_nights <= input$min_nights_slider[2])
})
output$map <- renderLeaflet({
pal <- colorFactor(palette = "Dark2", domain = filtered_airbnb()$room_type)
leaflet(filtered_airbnb()) %>%
addTiles() %>%
setView(lng = -73.987056, lat = 40.727248, zoom = 11) %>%
addProviderTiles("CartoDB.Positron") %>%
addCircleMarkers(lng = ~longitude, lat = ~latitude, radius = 5,
color = ~pal(room_type), fillOpacity = 0.8, stroke = FALSE,
popup = ~paste("<b>Name:</b> ", name, "<br>",
"<b>Room Type:</b> ", room_type, "<br>",
"<b>Price:</b> $", price, "/night"))
})
}
shinyApp(ui, server)
library(leaflet)
ui <- fluidPage(
titlePanel("Airbnb Listings in New York City"),
sidebarLayout(
sidebarPanel(
sliderInput("price_slider", "Filter by Price", min = 0, max = 1000, value = c(0, 500)),
sliderInput("min_nights_slider", "Filter by Minimum Nights", min = 1, max = 30, value = c(1, 7))
),
mainPanel(
leafletOutput("map")
)
server <- function(input, output) {
filtered_airbnb <- reactive({
airbnb %>%
filter(price >= input$price_slider[1] & price <= input$price_slider[2] & minimum_nights >= input$min_nights_slider[1] & minimum_nights <= input$min_nights_slider[2])
})
output$map <- renderLeaflet({
pal <- colorFactor(palette = "Dark2", domain = filtered_airbnb()$room_type)
leaflet(filtered_airbnb()) %>%
addTiles() %>%
setView(lng = -73.987056, lat = 40.727248, zoom = 11) %>%
addProviderTiles("CartoDB.Positron") %>%
addCircleMarkers(lng = ~longitude, lat = ~latitude, radius = 5,
color = ~pal(room_type), fillOpacity = 0.8, stroke = FALSE,
popup = ~paste("<b>Name:</b> ", name, "<br>",
"<b>Room Type:</b> ", room_type, "<br>",
"<b>Price:</b> $", price, "/night"))
})
}
shinyApp(ui, server)
library(shiny)
library(plotly)
# Define colors for each room_type
colors <- c("#7fc97f", "#beaed4", "#fdc086", "#ffff99")
ui <- fluidPage(
titlePanel("Price Distribution of Airbnb Listings in New York City"),
sidebarLayout(
sidebarPanel(
sliderInput("price_range", "Price Range:",
min = 0, max = 1000, value = c(0, 500)),
br(),
checkboxGroupInput("room_type", "Select Room Types to Display:",
choices = unique(airbnb$room_type),
selected = unique(airbnb$room_type)),
br(),
selectInput("neighbourhood_group", "Select a Neighbourhood Group:",
choices = c("All", sort(unique(airbnb$neighbourhood_group)))),
br(),
selectInput("minimum_nights", "Minimum Nights:",
choices = c("All", 1:30),
selected = "All"),
br(),
selectInput("availability_365", "Availability 365:",
choices = c("All", sort(unique(airbnb$availability_365))))
),
mainPanel(
plotlyOutput("plot")
)
server <- function(input, output) {
filtered_airbnb <- reactive({
# Map each room_type to a color
colors_map <- setNames(colors, unique(airbnb$room_type))
airbnb %>%
filter(price >= input$price_range[1] & price <= input$price_range[2],
room_type %in% input$room_type,
if(input$neighbourhood_group == "All") TRUE else neighbourhood_group == input$neighbourhood_group,
if(input$minimum_nights == "All") TRUE else minimum_nights == as.numeric(input$minimum_nights),
if(input$availability_365 == "All") TRUE else availability_365 == as.numeric(input$availability_365)
) %>%
# Add a new column "color" based on room_type
mutate(color = colors_map[room_type])
})
output$plot <- renderPlotly({
filtered_airbnb() %>%
plot_ly(x = ~price, type = "histogram",
marker = list(color = ~color,
line = list(color = "white", width = 0.5)),
hovertemplate = paste(
"<b>Price:</b> %{x:.0f}<br>",
"<b>Count:</b> %{y:.0f}<br>",
"<b>Room Type:</b> %{marker.color}"
),
showlegend = FALSE
) %>%
layout(xaxis = list(title = "Price"),
yaxis = list(title = "Count"),
hovermode = "closest",
hoverlabel = list(bgcolor = "white",
font = list(family = "Roboto", size = 14),
align = "left"),
colorway = colors,
margin = list(l = 40, r = 40, t = 40, b = 40))
})
}
shinyApp(ui, server)
