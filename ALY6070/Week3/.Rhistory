)
# Define server
server <- function(input, output) {
# Reactive function to update map
output$map <- renderLeaflet({
mapview() %>%
addTiles() %>%
addCircleMarkers(
data = airbnb,
radius = 3,
stroke = FALSE,
fillOpacity = 0.7,
color = ~pal(density),
group = "Airbnb"
) %>%
setView(lng = -73.985428, lat = 40.748817, zoom = input$zoom) %>%
addLayersControl(overlayGroups = "Airbnb", options = layersControlOptions(collapsed = FALSE))
})
# Create reactive color palette based on density
pal <- reactive({
colorNumeric(
palette = "YlOrRd",
domain = airbnb$density
)
})
}
# Run the app
shinyApp(ui = ui, server = server)
# Define UI
ui <- fluidPage(theme = shinytheme("lumen"),
useShinyjs(),
tags$style(
HTML(
"
body {
background-image: url('https://images.credly.com/images/432ea12d-444b-42e7-a1d9-f5a3655fb948/blob.png');
background-size: 15%;
background-repeat: no-repeat;
background-position: left bottom;
}
"
)
),
titlePanel("Airbnb's in New York"),
sidebarLayout(
sidebarPanel(
sliderInput("zoom", "Zoom In/Out", min = 1, max = 20, value = 10, step = 1),
),
mainPanel(
#leafletOutput("map")
mapview(airbnb, xcol = "longitude", ycol = "latitude", crs = 4326, grid = FALSE)
)
# Define server function
server <- function(input, output) {
# Create reactive object containing the map data
map_data <- reactive({
# Your code to read in or process the map data goes here
airbnb # For example
})
# Render map using mapviewOutput()
output$map <- renderMapview({
mapview(map_data(), xcol = "longitude", ycol = "latitude", crs = 4326, grid = FALSE)
})
}
# Run the app
shinyApp(ui = ui, server = server)
# Define UI
ui <- fluidPage(theme = shinytheme("lumen"),
useShinyjs(),
tags$style(
HTML(
"
body {
background-image: url('https://images.credly.com/images/432ea12d-444b-42e7-a1d9-f5a3655fb948/blob.png');
background-size: 15%;
background-repeat: no-repeat;
background-position: left bottom;
}
"
)
),
titlePanel("Airbnb's in New York"),
sidebarLayout(
sidebarPanel(
sliderInput("zoom", "Zoom In/Out", min = 1, max = 20, value = 10, step = 1),
),
mainPanel(
#leafletOutput("map")
mapview(airbnb, xcol = "longitude", ycol = "latitude", crs = 4326, grid = FALSE)
)
# Define server function
server <- function(input, output) {
# Create reactive object containing the map data
map_data <- reactive({
# Convert airbnb object to a data frame
airbnb_df <- as.data.frame(airbnb)
return(airbnb_df)
})
# Render map using mapviewOutput()
output$map <- renderMapview({
mapview(map_data(), xcol = "longitude", ycol = "latitude", crs = 4326, grid = FALSE)
})
}
# Run the app
shinyApp(ui = ui, server = server)
# Define UI
ui <- fluidPage(theme = shinytheme("lumen"),
useShinyjs(),
tags$style(
HTML(
"
body {
background-image: url('https://images.credly.com/images/432ea12d-444b-42e7-a1d9-f5a3655fb948/blob.png');
background-size: 15%;
background-repeat: no-repeat;
background-position: left bottom;
}
"
)
),
titlePanel("Airbnb's in New York"),
sidebarLayout(
sidebarPanel(
sliderInput("zoom", "Zoom In/Out", min = 1, max = 20, value = 10, step = 1),
),
mainPanel(
#leafletOutput("map")
mapview(airbnb, xcol = "longitude", ycol = "latitude", crs = 4326, grid = FALSE)
)
# Define server function
server <- function(input, output) {
# Create reactive object containing the map data
map_data <- reactive({
# Extract longitude and latitude coordinates from airbnb object
coords <- sp::coordinates(airbnb)
airbnb_df <- data.frame(longitude = coords[,1], latitude = coords[,2])
return(airbnb_df)
})
# Render map using mapviewOutput()
output$map <- renderMapview({
mapview(map_data(), zcol = "price", at = seq(0, 500, 50), legend = TRUE, legend.position = "bottomright")
})
}
# Run the app
shinyApp(ui = ui, server = server)
ui <- fluidPage(
titlePanel("Airbnb Listings in New York City"),
sidebarLayout(
sidebarPanel(
sliderInput("price_slider", "Filter by Price", min = 0, max = 1000, value = c(0, 500)),
sliderInput("min_nights_slider", "Filter by Minimum Nights", min = 1, max = 30, value = c(1, 7))
),
mainPanel(
leafletOutput("map")
)
server <- function(input, output) {
filtered_data <- reactive({
airbnb_data %>%
filter(price >= input$price_slider[1] & price <= input$price_slider[2] & minimum_nights >= input$min_nights_slider[1] & minimum_nights <= input$min_nights_slider[2])
})
output$map <- renderLeaflet({
leaflet(filtered_data()) %>%
addTiles() %>%
setView(lng = -73.987056, lat = 40.727248, zoom = 11) %>%
addProviderTiles("CartoDB.Positron") %>%
addPolygons(fillColor = ~colorNumeric(palette = "RdPu", domain = filtered_data()$price)(price),
fillOpacity = 0.7, color = "#BDBDC3", weight = 1) %>%
addLegend("bottomright", pal = colorNumeric(palette = "RdPu", domain = filtered_data()$price), values = ~price, title = "Price")
})
}
shinyApp(ui, server)
server <- function(input, output) {
filtered_data <- reactive({
airbnb %>%
filter(price >= input$price_slider[1] & price <= input$price_slider[2] & minimum_nights >= input$min_nights_slider[1] & minimum_nights <= input$min_nights_slider[2])
})
output$map <- renderLeaflet({
leaflet(filtered_data()) %>%
addTiles() %>%
setView(lng = -73.987056, lat = 40.727248, zoom = 11) %>%
addProviderTiles("CartoDB.Positron") %>%
addPolygons(fillColor = ~colorNumeric(palette = "RdPu", domain = filtered_data()$price)(price),
fillOpacity = 0.7, color = "#BDBDC3", weight = 1) %>%
addLegend("bottomright", pal = colorNumeric(palette = "RdPu", domain = filtered_data()$price), values = ~price, title = "Price")
})
}
server <- function(input, output) {
filtered_data <- reactive({
airbnb %>%
filter(price >= input$price_slider[1] & price <= input$price_slider[2] & minimum_nights >= input$min_nights_slider[1] & minimum_nights <= input$min_nights_slider[2])
})
output$map <- renderLeaflet({
leaflet(filtered_data()) %>%
addTiles() %>%
setView(lng = -73.987056, lat = 40.727248, zoom = 11) %>%
addProviderTiles("CartoDB.Positron") %>%
addPolygons(fillColor = ~colorNumeric(palette = "RdPu", domain = filtered_data()$price)(price),
fillOpacity = 0.7, color = "#BDBDC3", weight = 1) %>%
addLegend("bottomright", pal = colorNumeric(palette = "RdPu", domain = filtered_data()$price), values = ~price, title = "Price")
})
}
shinyApp(ui, server)
str(airbnb)
long_data <- gather(airbnb, key = "variable", value = "value", longitude, latitude)
long_data
View(long_data)
long_data <- gather(airbnb, key = "coord", value = "value", longitude, latitude)
long_data
View(long_data)
View(airbnb)
library(ggplot2)
ggplot(long_data, aes(x = variable, y = value, group = group)) +
geom_path()
ggplot(long_data, aes(x = variable, y = value, group = group)) + geom_path()
ggplot(long_data, aes(x = coord, y = value, group = group)) + geom_path()
ggplot(long_data, aes(x = coord, y = value, group = group))
ggplot(long_data, aes(x = coord, y = value, group = price)) + geom_path()
server <- function(input, output) {
filtered_data <- reactive({
airbnb %>%
filter(price >= input$price_slider[1] & price <= input$price_slider[2] & minimum_nights >= input$min_nights_slider[1] & minimum_nights <= input$min_nights_slider[2])
})
output$map <- renderLeaflet({
leaflet(filtered_data()) %>%
addTiles() %>%
setView(lng = -73.987056, lat = 40.727248, zoom = 11) %>%
addProviderTiles("CartoDB.Positron") %>%
addPolygons(fillColor = ~colorNumeric(palette = "RdPu", domain = filtered_data()$price)(price),
fillOpacity = 0.7, color = "#BDBDC3", weight = 1) %>%
addLegend("bottomright", pal = colorNumeric(palette = "RdPu", domain = filtered_data()$price), values = ~price, title = "Price")
})
}
shinyApp(ui, server)
server <- function(input, output) {
filtered_data <- reactive({
long_data %>%
filter(price >= input$price_slider[1] & price <= input$price_slider[2] & minimum_nights >= input$min_nights_slider[1] & minimum_nights <= input$min_nights_slider[2])
})
output$map <- renderLeaflet({
leaflet(filtered_data()) %>%
addTiles() %>%
setView(lng = -73.987056, lat = 40.727248, zoom = 11) %>%
addProviderTiles("CartoDB.Positron") %>%
addPolygons(fillColor = ~colorNumeric(palette = "RdPu", domain = filtered_data()$price)(price),
fillOpacity = 0.7, color = "#BDBDC3", weight = 1) %>%
addLegend("bottomright", pal = colorNumeric(palette = "RdPu", domain = filtered_data()$price), values = ~price, title = "Price")
})
}
shinyApp(ui, server)
my_packages = c("plyr", "plotly", "ggplot2", "psych", "tidyr", "tidyverse","dplyr","lubridate","readr","caret","caTools","glmnet","shiny","shinyvalidate","shinyWidgets","shinythemes","tippy","shinyjs","leaflet","mapview")
#install.packages(my_packages)
lapply(my_packages, require, character.only = T)
airbnb_unclean = read.csv("~/R_Projects/Data/AB_NYC_2019.csv")
print('Uncleaned Dataframe Info:')
cat("Number of Rows:", nrow(airbnb_unclean), "\n") # Printing string and variable row count on the same line
cat("Number of Columns:", ncol(airbnb_unclean), "\n")
cat("Blank cells count:", sum(!complete.cases(airbnb_unclean))) # Displaying Blank Cells Count from the original data frame
headTail(airbnb_unclean, top = 3, bottom = 3, ellipsis = F)
airbnb_sort= airbnb_unclean[order(-airbnb_unclean$price),] # Sorted dataframe with descending price
headTail(airbnb_sort, top = 3, bottom = 3, ellipsis = F)
print('Removed Blank cells:')
airbnb_modified = na.omit(airbnb_sort)
print('Resized dataframe:')
airbnb = airbnb_modified[26892:22003,] # Remove the top 55 % and bottom 45%
cat("Number of Rows:", nrow(airbnb), "\n")
cat("Number of Columns:", ncol(airbnb), "\n")
cat("Blank cells count in cleaned dataframe:", sum(!complete.cases(airbnb)), "\n") # Displaying blank cells count after removal
headTail(airbnb, top = 3, bottom = 3, ellipsis = F) # Cleaned Dataframe
# crs: coordinate reference system
mapview(airbnb, xcol = "longitude", ycol = "latitude", crs = 4326, grid = FALSE)
# Define UI
ui <- fluidPage(theme = shinytheme("lumen"),
useShinyjs(),
tags$style(
HTML(
"
body {
background-image: url('https://images.credly.com/images/432ea12d-444b-42e7-a1d9-f5a3655fb948/blob.png');
background-size: 15%;
background-repeat: no-repeat;
background-position: left bottom;
}
"
)
),
titlePanel("Airbnb's in New York"),
sidebarLayout(
sidebarPanel(
sliderInput("zoom", "Zoom In/Out", min = 1, max = 20, value = 10, step = 1),
),
mainPanel(
#leafletOutput("map")
mapview(airbnb, xcol = "longitude", ycol = "latitude", crs = 4326, grid = FALSE)
)
# Define server function
server <- function(input, output) {
# Create reactive object containing the map data
map_data <- reactive({
# Extract longitude and latitude coordinates from airbnb object
coords <- sp::coordinates(airbnb)
airbnb_df <- data.frame(longitude = coords[,1], latitude = coords[,2])
return(airbnb_df)
})
# Render map using mapviewOutput()
output$map <- renderMapview({
mapview(map_data(), zcol = "price", at = seq(0, 500, 50), legend = TRUE, legend.position = "bottomright")
})
}
# Run the app
shinyApp(ui = ui, server = server)
ui <- fluidPage(
titlePanel("Airbnb Listings in New York City"),
sidebarLayout(
sidebarPanel(
sliderInput("price_slider", "Filter by Price", min = 0, max = 1000, value = c(0, 500)),
sliderInput("min_nights_slider", "Filter by Minimum Nights", min = 1, max = 30, value = c(1, 7))
),
mainPanel(
leafletOutput("map")
)
server <- function(input, output) {
filtered_data <- reactive({
airbnb %>%
filter(price >= input$price_slider[1] & price <= input$price_slider[2] & minimum_nights >= input$min_nights_slider[1] & minimum_nights <= input$min_nights_slider[2])
})
output$map <- renderLeaflet({
leaflet(filtered_data()) %>%
addTiles() %>%
setView(lng = -73.987056, lat = 40.727248, zoom = 11) %>%
addProviderTiles("CartoDB.Positron") %>%
addPolygons(fillColor = ~colorNumeric(palette = "RdPu", domain = filtered_data()$price)(price),
fillOpacity = 0.7, color = "#BDBDC3", weight = 1) %>%
addLegend("bottomright", pal = colorNumeric(palette = "RdPu", domain = filtered_data()$price), values = ~price, title = "Price")
})
}
shinyApp(ui, server)
ui <- fluidPage(
titlePanel("Airbnb Listings in New York City"),
sidebarLayout(
sidebarPanel(
sliderInput("price_slider", "Filter by Price", min = 0, max = 1000, value = c(0, 500)),
sliderInput("min_nights_slider", "Filter by Minimum Nights", min = 1, max = 30, value = c(1, 7))
),
mainPanel(
leafletOutput("map")
)
server <- function(input, output) {
filtered_data <- reactive({
airbnb %>%
filter(price >= input$price_slider[1] & price <= input$price_slider[2] & minimum_nights >= input$min_nights_slider[1] & minimum_nights <= input$min_nights_slider[2])
})
output$map <- renderLeaflet({
leaflet() %>%
addTiles() %>%
setView(lng = -73.987056, lat = 40.727248, zoom = 11) %>%
addProviderTiles("CartoDB.Positron") %>%
addPolygons(data = st_as_sf(filtered_data()), fillColor = ~colorNumeric(palette = "RdPu", domain = filtered_data()$price)(price),
fillOpacity = 0.7, color = "#BDBDC3", weight = 1) %>%
addLegend("bottomright", pal = colorNumeric(palette = "RdPu", domain = filtered_data()$price), values = ~price, title = "Price")
})
}
shinyApp(ui, server)
library(ggmap)
airbnb <- read.csv("https://github.com/abidikshit/R_Projects/blob/main/Data/AB_NYC_2019.csv")
# Geocode the address information to obtain the spatial coordinates
geocoded <- geocode(paste(airbnb$neighbourhood, airbnb$latitude, airbnb$longitude, sep = ", "))
library(ggmap)
airbnb <- read.csv("https://github.com/abidikshit/R_Projects/blob/main/Data/AB_NYC_2019.csv")
# Geocode the address information to obtain the spatial coordinates
geocoded <- geocode(paste(airbnb$neighbourhood, airbnb$latitude, airbnb$longitude, sep = ", "))
server <- function(input, output) {
filtered_data <- reactive({
airbnb %>%
filter(price >= input$price_slider[1] & price <= input$price_slider[2] & minimum_nights >= input$min_nights_slider[1] & minimum_nights <= input$min_nights_slider[2])
})
output$map <- renderLeaflet({
leaflet(filtered_data()) %>%
addTiles() %>%
setView(lng = -73.987056, lat = 40.727248, zoom = 11) %>%
addProviderTiles("CartoDB.Positron") %>%
addMarkers(lng = ~longitude, lat = ~latitude, popup = ~name)
})
}
airbnb_unclean = read.csv("~/R_Projects/Data/AB_NYC_2019.csv")
print('Uncleaned Dataframe Info:')
cat("Number of Rows:", nrow(airbnb_unclean), "\n") # Printing string and variable row count on the same line
cat("Number of Columns:", ncol(airbnb_unclean), "\n")
cat("Blank cells count:", sum(!complete.cases(airbnb_unclean))) # Displaying Blank Cells Count from the original data frame
headTail(airbnb_unclean, top = 3, bottom = 3, ellipsis = F)
airbnb_sort= airbnb_unclean[order(-airbnb_unclean$price),] # Sorted dataframe with descending price
headTail(airbnb_sort, top = 3, bottom = 3, ellipsis = F)
print('Removed Blank cells:')
airbnb_modified = na.omit(airbnb_sort)
print('Resized dataframe:')
airbnb = airbnb_modified[26892:22003,] # Remove the top 55 % and bottom 45%
cat("Number of Rows:", nrow(airbnb), "\n")
cat("Number of Columns:", ncol(airbnb), "\n")
cat("Blank cells count in cleaned dataframe:", sum(!complete.cases(airbnb)), "\n") # Displaying blank cells count after removal
headTail(airbnb, top = 3, bottom = 3, ellipsis = F) # Cleaned Dataframe
airbnb_sort= airbnb_unclean[order(-airbnb_unclean$price),] # Sorted dataframe with descending price
headTail(airbnb_sort, top = 3, bottom = 3, ellipsis = F)
print('Removed Blank cells:')
airbnb_modified = na.omit(airbnb_sort)
print('Resized dataframe:')
airbnb = airbnb_modified[26892:22003,] # Remove the top 55 % and bottom 45%
cat("Number of Rows:", nrow(airbnb), "\n")
cat("Number of Columns:", ncol(airbnb), "\n")
cat("Blank cells count in cleaned dataframe:", sum(!complete.cases(airbnb)), "\n") # Displaying blank cells count after removal
headTail(airbnb, top = 3, bottom = 3, ellipsis = F) # Cleaned Dataframe
ui <- fluidPage(
titlePanel("Airbnb Listings in New York City"),
sidebarLayout(
sidebarPanel(
sliderInput("price_slider", "Filter by Price", min = 0, max = 1000, value = c(0, 500)),
sliderInput("min_nights_slider", "Filter by Minimum Nights", min = 1, max = 30, value = c(1, 7))
),
mainPanel(
leafletOutput("map")
)
server <- function(input, output) {
filtered_data <- reactive({
airbnb %>%
filter(price >= input$price_slider[1] & price <= input$price_slider[2] & minimum_nights >= input$min_nights_slider[1] & minimum_nights <= input$min_nights_slider[2])
})
output$map <- renderLeaflet({
leaflet(filtered_data()) %>%
addTiles() %>%
setView(lng = -73.987056, lat = 40.727248, zoom = 11) %>%
addProviderTiles("CartoDB.Positron") %>%
addMarkers(lng = ~longitude, lat = ~latitude, popup = ~name)
})
}
shinyApp(ui, server)
ui <- fluidPage(
titlePanel("Airbnb Listings in New York City"),
sidebarLayout(
sidebarPanel(
sliderInput("price_slider", "Filter by Price", min = 0, max = 1000, value = c(0, 500)),
sliderInput("min_nights_slider", "Filter by Minimum Nights", min = 1, max = 30, value = c(1, 7))
),
mainPanel(
leafletOutput("map")
)
server <- function(input, output) {
filtered_data <- reactive({
airbnb %>%
filter(price >= input$price_slider[1] & price <= input$price_slider[2] & minimum_nights >= input$min_nights_slider[1] & minimum_nights <= input$min_nights_slider[2])
})
output$map <- renderLeaflet({
leaflet() %>%
addTiles() %>%
setView(lng = -73.987056, lat = 40.727248, zoom = 11) %>%
addProviderTiles("CartoDB.Positron") %>%
addPolygons(data = st_as_sf(filtered_data()), fillColor = ~colorNumeric(palette = "RdPu", domain = filtered_data()$price)(price),
fillOpacity = 0.7, color = "#BDBDC3", weight = 1) %>%
addLegend("bottomright", pal = colorNumeric(palette = "RdPu", domain = filtered_data()$price), values = ~price, title = "Price")
})
}
server <- function(input, output) {
filtered_data <- reactive({
airbnb %>%
filter(price >= input$price_slider[1] & price <= input$price_slider[2] & minimum_nights >= input$min_nights_slider[1] & minimum_nights <= input$min_nights_slider[2])
})
output$map <- renderLeaflet({
leaflet(filtered_data()) %>%
addTiles() %>%
setView(lng = -73.987056, lat = 40.727248, zoom = 11) %>%
addProviderTiles("CartoDB.Positron") %>%
addMarkers(lng = ~longitude, lat = ~latitude, popup = ~name)
})
}
shinyApp(ui, server)
airbnb_unclean = read.csv("~/R_Projects/Data/AB_NYC_2019.csv")
print('Uncleaned Dataframe Info:')
cat("Number of Rows:", nrow(airbnb_unclean), "\n") # Printing string and variable row count on the same line
cat("Number of Columns:", ncol(airbnb_unclean), "\n")
cat("Blank cells count:", sum(!complete.cases(airbnb_unclean))) # Displaying Blank Cells Count from the original data frame
headTail(airbnb_unclean, top = 3, bottom = 3, ellipsis = F)
ui <- fluidPage(
titlePanel("Airbnb Listings in New York City"),
sidebarLayout(
sidebarPanel(
sliderInput("price_slider", "Filter by Price", min = 0, max = 1000, value = c(0, 500)),
sliderInput("min_nights_slider", "Filter by Minimum Nights", min = 1, max = 30, value = c(1, 7))
),
mainPanel(
leafletOutput("map")
)
server <- function(input, output) {
filtered_data <- reactive({
airbnb %>%
filter(price >= input$price_slider[1] & price <= input$price_slider[2] & minimum_nights >= input$min_nights_slider[1] & minimum_nights <= input$min_nights_slider[2])
})
output$map <- renderLeaflet({
leaflet(filtered_data()) %>%
addTiles() %>%
setView(lng = -73.987056, lat = 40.727248, zoom = 11) %>%
addProviderTiles("CartoDB.Positron") %>%
addMarkers(lng = ~longitude, lat = ~latitude, popup = ~name)
})
}
shinyApp(ui, server)
airbnb_sort= airbnb_unclean[order(-airbnb_unclean$price),] # Sorted dataframe with descending price
headTail(airbnb_sort, top = 3, bottom = 3, ellipsis = F)
print('Removed Blank cells:')
airbnb_modified = na.omit(airbnb_sort)
print('Resized dataframe:')
airbnb = airbnb_modified[26892:22003,] # Remove the top 55 % and bottom 45%
cat("Number of Rows:", nrow(airbnb), "\n")
cat("Number of Columns:", ncol(airbnb), "\n")
cat("Blank cells count in cleaned dataframe:", sum(!complete.cases(airbnb)), "\n") # Displaying blank cells count after removal
headTail(airbnb, top = 3, bottom = 3, ellipsis = F) # Cleaned Dataframe
