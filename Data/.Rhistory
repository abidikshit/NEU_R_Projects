corpus <- tm_map(corpus, removeNumbers)
corpus <- tm_map(corpus, removePunctuation)
corpus <- tm_map(corpus, stripWhitespace)
corpus <- tm_map(corpus, removeWords, stopwords("english"))
corpus <- tm_map(corpus, stemDocument)
dtm <- TermDocumentMatrix(corpus)
m <- as.matrix(dtm)
v <- sort(rowSums(m), decreasing = TRUE)
d <- data.frame(word = names(v), freq = v)
d <- d[1:input$nwords,]
wordcloud2(d, size = 1)
}
})
}
shinyApp(ui = ui, server = server)
# Define the UI
ui <- fluidPage(
# File upload widgets
selectInput("file1", "Select CSV file 1:", choices = NULL),
selectInput("file2", "Select CSV file 2:", choices = NULL),
selectInput("file3", "Select CSV file 3:", choices = NULL),
# Label for file format restriction
HTML("<p><em>Please only upload .csv files.</em></p>"),
# Numeric input for number of words in word cloud
numericInput("numWords", "Number of words:", value = 50),
# Output for word cloud
plotOutput("wordCloud")
)
# Define the server
server <- function(input, output) {
# Function to read in CSV file and return a data frame
read_csv <- function(file) {
if (!is.null(file)) {
df <- read.csv(file$datapath)
return(df)
}
# Call read_csv function for each file uploaded
file1Data <- reactive({
read_csv(input$file1)
})
file2Data <- reactive({
read_csv(input$file2)
})
file3Data <- reactive({
read_csv(input$file3)
})
# Combine all data frames into one
allData <- reactive({
df1 <- file1Data()
df2 <- file2Data()
df3 <- file3Data()
if (!is.null(df1) & !is.null(df2) & !is.null(df3)) {
allDf <- rbind(df1, df2, df3)
return(allDf)
}
})
# Function to generate word cloud and plot it
generateWordCloud <- function(data, numWords) {
if (!is.null(data)) {
wc <- wordcloud(words = data$column_with_text,
freq = data$column_with_frequency,
max.words = numWords,
random.order = FALSE,
rot.per = 0.35,
colors = brewer.pal(8, "Dark2"))
return(wc)
}
# Call generateWordCloud function with allData and numWords inputs
output$wordCloud <- renderPlot({
generateWordCloud(allData(), input$numWords)
})
# Update dropdown menu choices with .csv files in the user's directory
observe({
choices <- list.files(pattern = "\\.csv$")
updateSelectInput(session, "file1", choices = choices)
updateSelectInput(session, "file2", choices = choices)
updateSelectInput(session, "file3", choices = choices)
})
}
# Run the app
shinyApp(ui = ui, server = server)
# Define the UI
ui <- fluidPage(
# File upload widgets
selectInput("file1", "Select CSV file 1:", choices = NULL),
selectInput("file2", "Select CSV file 2:", choices = NULL),
selectInput("file3", "Select CSV file 3:", choices = NULL),
# Label for file format restriction
HTML("<p><em>Please only upload .csv files.</em></p>"),
# Numeric input for number of words in word cloud
numericInput("numWords", "Number of words:", value = 50),
# Output for word cloud
plotOutput("wordCloud")
)
# Define the server
server <- function(input, output) {
# Function to read in CSV file and return a data frame
read_csv <- function(file) {
if (!is.null(file)) {
df <- read.csv(file$datapath)
return(df)
}
# Call read_csv function for each file uploaded
file1Data <- reactive({
read_csv(input$file1)
})
file2Data <- reactive({
read_csv(input$file2)
})
file3Data <- reactive({
read_csv(input$file3)
})
# Combine all data frames into one
allData <- reactive({
df1 <- file1Data()
df2 <- file2Data()
df3 <- file3Data()
if (!is.null(df1) & !is.null(df2) & !is.null(df3)) {
allDf <- rbind(df1, df2, df3)
return(allDf)
}
})
# Function to generate word cloud and plot it
generateWordCloud <- function(data, numWords) {
if (!is.null(data)) {
wc <- wordcloud(words = data$column_with_text,
freq = data$column_with_frequency,
max.words = numWords,
random.order = FALSE,
rot.per = 0.35,
colors = brewer.pal(8, "Dark2"))
return(wc)
}
# Call generateWordCloud function with allData and numWords inputs
output$wordCloud <- renderPlot({
generateWordCloud(allData(), input$numWords)
})
# Update dropdown menu choices with .csv files in the user's directory
observe({
choices <- list.files(pattern = "\\.csv$")
updateSelectInput(session, "file1", choices = choices)
updateSelectInput(session, "file2", choices = choices)
updateSelectInput(session, "file3", choices = choices)
})
}
shinyApp(ui = ui, server = server)
ui <- fluidPage(
titlePanel("Word Cloud Generator"),
sidebarLayout(
sidebarPanel(
fileInput("file", "Upload CSV File (must be .csv)"),
numericInput("numWords", "Number of Words to Display:", value = 50),
br(),
tags$label("Please upload a CSV file"),
br(),
tags$label("(Note: Only the first column of the CSV file will be used)"),
br()
),
mainPanel(
wordcloud2Output("wordcloud")
)
server <- function(input, output) {
# Function to create word cloud
createWordcloud <- function(file, numWords) {
# Read in CSV file
data <- read.csv(file$datapath, header = TRUE, stringsAsFactors = FALSE)
# Extract first column
text <- data[,1]
# Create word cloud
wordcloud2(words = text, size = 0.8, minSize = 10, gridSize = 30, color = "random",
backgroundColor = "white", fontFamily = "serif", rotateRatio = 0.5,
minRotation = -pi/4, maxRotation = pi/4, shuffle = TRUE,
shape = "circle", rotateRatio = 0.5, maxWords = numWords)
}
# Render word cloud
output$wordcloud <- renderWordcloud2({
if (is.null(input$file)) {
return(NULL)
}
if (!grepl(".csv", input$file$name)) {
return(NULL)
}
createWordcloud(input$file, input$numWords)
})
}
shinyApp(ui = ui, server = server)
library(shiny)
library(wordcloud)
ui <- fluidPage(
# File upload dropdowns
selectInput(inputId = "file1", label = "Upload CSV file 1:", choices = NULL),
selectInput(inputId = "file2", label = "Upload CSV file 2:", choices = NULL),
selectInput(inputId = "file3", label = "Upload CSV file 3:", choices = NULL),
# Numeric input for word count
numericInput(inputId = "wordCount", label = "Number of words to display:", value = 50),
# Word cloud output
plotOutput(outputId = "wordCloud")
)
server <- function(input, output) {
# Function to read CSV file
readCSV <- function(file) {
if (is.null(file)) {
return(NULL)
}
data <- read.csv(file$datapath)
return(data)
}
# Update file choices in dropdowns
observe({
fileNames <- list.files(pattern = "\\.csv$")
choices <- setNames(fileNames, fileNames)
updateSelectInput(session, inputId = "file1", choices = choices)
updateSelectInput(session, inputId = "file2", choices = choices)
updateSelectInput(session, inputId = "file3", choices = choices)
})
# Generate word cloud
output$wordCloud <- renderPlot({
# Read selected file
file1 <- readCSV(input$file1)
file2 <- readCSV(input$file2)
file3 <- readCSV(input$file3)
# Combine files
data <- rbind(file1, file2, file3)
# Generate word cloud
wordcloud(words = data$Word, freq = data$Freq, max.words = input$wordCount)
})
}
shinyApp(ui = ui, server = server)
library(shiny)
library(wordcloud)
ui <- fluidPage(
# File upload dropdowns
selectInput(inputId = "file1", label = "Upload CSV file 1:", choices = NULL),
selectInput(inputId = "file2", label = "Upload CSV file 2:", choices = NULL),
selectInput(inputId = "file3", label = "Upload CSV file 3:", choices = NULL),
# Numeric input for word count
numericInput(inputId = "wordCount", label = "Number of words to display:", value = 50),
# Word cloud output
plotOutput(outputId = "wordCloud")
)
server <- function(input, output) {
# Function to read CSV file
readCSV <- function(file) {
if (is.null(file)) {
return(NULL)
}
data <- read.csv(file$datapath)
return(data)
}
# Update file choices in dropdowns
observe({
fileNames <- list.files(pattern = "\\.csv$")
choices <- setNames(fileNames, fileNames)
updateSelectInput(session, inputId = "file1", choices = choices)
updateSelectInput(session, inputId = "file2", choices = choices)
updateSelectInput(session, inputId = "file3", choices = choices)
})
# Generate word cloud
output$wordCloud <- renderPlot({
# Read selected file
file1 <- readCSV(input$file1)
file2 <- readCSV(input$file2)
file3 <- readCSV(input$file3)
# Combine files
data <- rbind(file1, file2, file3)
# Generate word cloud
wordcloud(words = data$Word, freq = data$Freq, max.words = input$wordCount)
})
}
shinyApp(ui = ui, server = server)
library(shiny)
library(wordcloud)
ui <- fluidPage(
# File upload dropdowns
selectInput(inputId = "file1", label = "Upload CSV file 1:", choices = NULL),
selectInput(inputId = "file2", label = "Upload CSV file 2:", choices = NULL),
selectInput(inputId = "file3", label = "Upload CSV file 3:", choices = NULL),
# Numeric input for word count
numericInput(inputId = "wordCount", label = "Number of words to display:", value = 50),
# Word cloud output
plotOutput(outputId = "wordCloud")
)
server <- function(input, output) {
# Function to read CSV file
readCSV <- function(file) {
if (is.null(file)) {
return(NULL)
}
data <- read.csv(file$datapath)
return(data)
}
# Update file choices in dropdowns
observe({
fileNames <- list.files(pattern = "\\.csv$")
choices <- setNames(fileNames, fileNames)
updateSelectInput(session, inputId = "file1", choices = choices)
updateSelectInput(session, inputId = "file2", choices = choices)
updateSelectInput(session, inputId = "file3", choices = choices)
})
# Generate word cloud
output$wordCloud <- renderPlot({
# Read selected file
file1 <- readCSV(input$file1)
file2 <- readCSV(input$file2)
file3 <- readCSV(input$file3)
# Combine files
data <- rbind(file1, file2, file3)
# Generate word cloud
wordcloud(words = data$Word, freq = data$Freq, max.words = input$wordCount)
})
}
# Set the working directory to the folder containing your CSV files
setwd("~/R_Projects/Data/")
# Run the Shiny app
shinyApp(ui = ui, server = server)
ui <- fluidPage(
titlePanel("Word Cloud Generator"),
sidebarLayout(
sidebarPanel(
fileInput("file", "Upload CSV File (must be .csv)"),
numericInput("numWords", "Number of Words to Display:", value = 50),
br(),
tags$label("Please upload a CSV file"),
br(),
tags$label("(Note: Only the first column of the CSV file will be used)"),
br()
),
mainPanel(
wordcloud2Output("wordcloud")
)
server <- function(input, output) {
# Function to create word cloud
createWordcloud <- function(file, numWords) {
# Read in CSV file
data <- read.csv(file$datapath, header = TRUE, stringsAsFactors = FALSE)
# Extract first column
text <- data[,1]
# Create word cloud
wordcloud2(words = text, size = 0.8, minSize = 10, gridSize = 30, color = "random",
backgroundColor = "white", fontFamily = "serif", rotateRatio = 0.5,
minRotation = -pi/4, maxRotation = pi/4, shuffle = TRUE,
shape = "circle", rotateRatio = 0.5, maxWords = numWords)
}
# Render word cloud
output$wordcloud <- renderWordcloud2({
if (is.null(input$file)) {
return(NULL)
}
if (!grepl(".csv", input$file$name)) {
return(NULL)
}
createWordcloud(input$file, input$numWords)
})
}
shinyApp(ui = ui, server = server)
# This code does not produce an error
library(shiny)
library(wordcloud)
ui <- fluidPage(
# Numeric input for word count
numericInput(inputId = "wordCount", label = "Number of words to display:", value = 50),
# Word cloud output
plotOutput(outputId = "wordCloud")
)
server <- function(input, output) {
# Generate word cloud
output$wordCloud <- renderPlot({
# Create example data
data <- data.frame(
Word = c("hello", "world", "goodbye", "cruel", "world"),
Freq = c(10, 5, 3, 7, 8)
)
# Generate word cloud
wordcloud(words = data$Word, freq = data$Freq, max.words = input$wordCount, rotateRatio = 0.5)
})
}
shinyApp(ui = ui, server = server)
# This code does not produce an error
library(shiny)
library(wordcloud)
ui <- fluidPage(
# Numeric input for word count
numericInput(inputId = "wordCount", label = "Number of words to display:", value = 50),
# Word cloud output
plotOutput(outputId = "wordCloud")
)
server <- function(input, output) {
# Generate word cloud
output$wordCloud <- renderPlot({
# Create example data
data <- data.frame(
Word = c("hello", "world", "goodbye", "cruel", "world"),
Freq = c(10, 5, 3, 7, 8)
)
# Generate word cloud
wordcloud(words = data$Word, freq = data$Freq, max.words = input$wordCount, rotateRatio = 0.5)
})
}
shinyApp(ui = ui, server = server)
library(shiny)
library(wordcloud)
ui <- fluidPage(
# File upload input
fileInput(inputId = "file", label = "Choose a CSV file"),
# Numeric input for word count
numericInput(inputId = "wordCount", label = "Number of words to display:", value = 50),
# Word cloud output
plotOutput(outputId = "wordCloud")
)
server <- function(input, output) {
# Generate word cloud
output$wordCloud <- renderPlot({
# Read in uploaded file data
fileData <- read.csv(input$file$datapath)
# Generate word cloud
wordcloud(words = fileData$Word, freq = fileData$Freq, max.words = input$wordCount, rotateRatio = 0.5)
})
}
shinyApp(ui = ui, server = server)
library(shiny)
library(wordcloud)
# Define UI
ui <- fluidPage(
# File input widget
fileInput("file", "Upload a CSV file (.csv format only)"),
# Label for number of words
h3("Enter the number of words to include in the word cloud:"),
# Numeric input widget for number of words
numericInput("num_words", label = NULL, value = 50),
selectInput("var",
label = "Choose a CSV File to display",
choices = c("File1.csv", "File2.csv",
"File3.csv"),
selected = "Percent White"),
verbatimTextOutput("file_content"),
# Output for word cloud
plotOutput("wordcloud")
)
# Define server
server <- function(input, output) {
selected_file <- reactive({
switch(input$file,
"File1.csv" = "/Users/smitparmar/Desktop/weatherHistory.csv",
"File2.csv" = "/Users/smitparmar/Desktop/child-mortality-vs-health-expenditure.csv",
"File3.csv" = "/Users/smitparmar/Desktop/smartphone.csv")
# Check that file is a .csv file
filedata <- reactive({
req(input$file)
if (grepl(".csv$", input$file$datapath)) {
read.csv(input$file$datapath)
} else {
NULL
}
})
# Produce word cloud based on specified number of words
output$wordcloud <- renderPlot({
if (!is.null(filedata())) {
# Clean and prepare text data for word cloud
text <- paste(filedata(), collapse = " ")
text <- gsub("[[:punct:]]", "", text)
text <- gsub("[[:digit:]]", "", text)
text <- tolower(text)
words <- strsplit(text, "\\s+")
words <- unlist(words)
words <- words[nchar(words) > 2]
# Produce word cloud
wordcloud(words, max.words = input$num_words)
}
})
}
# Run the application
shinyApp(ui, server)
ui <- fluidPage(
titlePanel("Word Cloud Generator"),
sidebarLayout(
sidebarPanel(
fileInput("file", "Upload CSV File (must be .csv)"),
numericInput("numWords", "Number of Words to Display:", value = 50),
br(),
tags$label("Please upload a CSV file"),
br(),
tags$label("(Note: Only the first column of the CSV file will be used)"),
br()
),
mainPanel(
wordcloud2Output("wordcloud")
)
server <- function(input, output) {
# Function to create word cloud
createWordcloud <- function(file, numWords) {
# Read in CSV file
data <- read.csv(file$datapath, header = TRUE, stringsAsFactors = FALSE)
# Extract first column
text <- data[,1]
# Create word cloud
wordcloud2(words = text, size = 0.8, minSize = 10, gridSize = 30, color = "random",
backgroundColor = "white", fontFamily = "serif", rotateRatio = 0.5,
minRotation = -pi/4, maxRotation = pi/4, shuffle = TRUE,
shape = "circle", rotateRatio = 0.5, maxWords = numWords)
}
# Render word cloud
output$wordcloud <- renderWordcloud2({
if (is.null(input$file)) {
return(NULL)
}
if (!grepl(".csv", input$file$name)) {
return(NULL)
}
createWordcloud(input$file, input$numWords)
})
}
shinyApp(ui = ui, server = server)
